name: build

on: [push, pull_request]

# permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

env:
  DOCKERFILE_PATH: docker/Dockerfile-Lambda-x86_64
  IMAGE_TAG: latest-lambda-x86_64
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
    - uses: actions/checkout@v3
    - uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: |
          ${{ secrets.AGGREGATOR_DAL_CLONE_PRIVATE_KEY }}    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      run: make poetry-download

    - name: Set up cache
      uses: actions/cache@v3.3.1
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install

    - name: Run style checks
      run: |
        make check-codestyle

    - name: Run tests
      run: |
        make test

    - name: Run safety checks
      run: |
        make check-safety

    - name: Build image
      run: |
        DOCKER_BUILDKIT=1 docker build --ssh default=${{ env.SSH_AUTH_SOCK }} -f ${{ env.DOCKERFILE_PATH }} .


  deploy:
      runs-on: ubuntu-latest
      needs: build
      if: github.ref == 'refs/heads/main'
      steps:
      - uses: actions/checkout@v3
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: |
            ${{ secrets.AGGREGATOR_DAL_CLONE_PRIVATE_KEY }}        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ECR_DEPLOY_ROLE }}
          aws-region: ${{ env.AWS_REGION}}
          role-session-name: GithubWorkflowsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.NEWS_AGGREGATOR_ECR_REPO }}
        run: |
          DOCKER_BUILDKIT=1 docker build  --ssh default=${{ env.SSH_AUTH_SOCK }} -f ${{ env.DOCKERFILE_PATH }} -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
            
      
      - name: Push to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.NEWS_AGGREGATOR_ECR_REPO }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}

      - name: Update Lambda functions with latest ECR image
        env:
          AGGREGATION_SCHEDULER_LAMBDA_NAME: aggregation-scheduler-lambda
          SOURCING_SCHEDULER_LAMBDA_NAME: sourcing-scheduler-lambda
          NEWS_AGGREGATION_PROCESSOR_LAMBDA_NAME: news-aggregation-processor-lambda
          NEWS_SOURCING_PROCESSOR_LAMBDA_NAME: news-sourcing-processor-lambda                            
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.NEWS_AGGREGATOR_ECR_REPO }}
        run: |
          echo "Updating aggregation scheduler lambda function with latest ECR image"
          aws lambda update-function-code \
          --function-name ${{ env.AGGREGATION_SCHEDULER_LAMBDA_NAME}} \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} \
          --region ${{ env.AWS_REGION}}
          echo "Updating sourcing scheduler lambda function with latest ECR image"
          aws lambda update-function-code \
          --function-name ${{ env.SOURCING_SCHEDULER_LAMBDA_NAME}} \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} \
          --region ${{ env.AWS_REGION}}
          echo "Updating news aggregation processor lambda function with latest ECR image"
          aws lambda update-function-code \
          --function-name ${{ env.NEWS_AGGREGATION_PROCESSOR_LAMBDA_NAME}} \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} \
          --region ${{ env.AWS_REGION}}
          echo "Updating news sourcing processor lambda function with latest ECR image"          
          aws lambda update-function-code \
          --function-name ${{ env.NEWS_SOURCING_PROCESSOR_LAMBDA_NAME}} \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} \
          --region ${{ env.AWS_REGION}}                                        
